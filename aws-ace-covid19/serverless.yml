service: aws-ace-covid19

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    layer: true
    slim: true
    useStaticCache: true
    useDownloadCache: true
    cacheLocation: '/Users/allanbenassi/cache'
    filename: requirements.txt


provider:
  name: aws
  runtime: python3.8
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: 
        - "*"
      Condition:
        StringEquals:
          ses:FromAddress:
            - "mailbot@c19.ace-aegon.cloud"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
      Resource: "arn:aws:s3:::${self:provider.environment.DYNAMODB_TABLE}/*"


functions:
  email:
    handler: todos/email.email
    events:
      - http:
          path: sendmail
          method: post
          cors: true
  track:
    handler: todos/track.track
    events:
      - http:
          path: track
          method: post
          cors: true
  tracklist:
    handler: todos/tracklist.tracklist
    events:
      - http:
          path: tracks
          method: post
          cors: true
  observation:
    handler: todos/observation.observation
    events:
      - http:
          path: observation
          method: post
          cors: true
  observationlist:
    handler: todos/observationlist.observationlist
    events:
      - http:
          path: observations
          method: post
          cors: true

  summariser:
    handler: todos/summariser.summariser
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          path: summariser
          method: post
          cors: true

  worldanalytics:
    handler: todos/worldanalytics.worldanalytics
    events:
      - http:
          path: worldanalytics
          method: post
          cors: true

  aegonanalytics:
    handler: todos/aegonanalytics.aegonanalytics
    events:
      - http:
          path: aegonanalytics
          method: post
          cors: true 

  selfanalytics:
    handler: todos/selfanalytics.selfanalytics
    events:
      - http:
          path: selfanalytics
          method: post
          cors: true

  create:
    handler: todos/create.create
    events:
      - http:
          path: todo
          method: post
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: post
          cors: true
  login:
    handler: todos/login.login
    events:
      - http:
          path: login
          method: post
          cors: true
  forgot:
    handler: todos/forgot.forgot
    events:
      - http:
          path: forgot
          method: post
          cors: true
  get:
    handler: todos/get.get
    events:
      - http:
          path: todo/{id}
          method: post
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todo
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todo/{id}
          method: delete
          cors: true
  dbstream:
    handler: todos/dbstream.dbstream
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - TodosDynamoDbTable
              - StreamArn
          batchSize: 1

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    S3BucketOutputs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.DYNAMODB_TABLE}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: aws:kms
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    #StreamFunctionEventSourceMappingDynamodbMyTable:
    #  Type: AWS::Lambda::EventSourceMapping
    #  DependsOn: IamPolicyLambdaExecution
    #  Properties:
    #    BatchSize: 10
    #    EventSourceArn:
    #      Fn::GetAtt:
    #        - TodosDynamoDbTable
    #        - StreamArn
    #    FunctionName:
    #      Fn::GetAtt:
    #        - dbstream
    #        - Arn
    #    StartingPosition: TRIM_HORIZON
    #    Enabled: True
